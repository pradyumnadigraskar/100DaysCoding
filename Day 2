Q 2  . (912.) Sort an Array

Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

 

Example 1:

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).
Example 2:

Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.


Solution : - 

class Solution(object):

    def mrg(self,lft,rst):
        res=[]
        i=0
        j=0

        while i < len(lft) and j < len(rst):
            if lft[i] <= rst[j]:
                res.append(lft[i])
                i+=1
            else:
                res.append(rst[j])
                j+=1
        while i < len(lft):
            res.append(lft[i])
            i += 1

        while j < len(rst):
            res.append(rst[j])
            j += 1
        
        return res

    def sortArray(self, nums): 
        if len(nums)<=1:
            return nums
        mid=len(nums)//2

        lftsd = nums[:mid]
        rtsd = nums[mid:]

        lf_srt=self.sortArray(lftsd)
        rf_srt=self.sortArray(rtsd)

        return self.mrg(lf_srt,rf_srt)
        
        
       

    
    



        
        

            
        
 
        
